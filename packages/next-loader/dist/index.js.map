{"version":3,"file":"index.js","sources":["../src/defineLive.tsx"],"sourcesContent":["/// <reference types=\"next\" />\n/// <reference types=\"react/experimental\" />\n\nimport {\n  type ClientPerspective,\n  type ClientReturn,\n  type ContentSourceMap,\n  type QueryParams,\n  type SanityClient,\n} from '@sanity/client'\nimport SanityLiveClientComponent from '@sanity/next-loader/client-components/live'\nimport SanityLiveStreamClientComponent from '@sanity/next-loader/client-components/live-stream'\n// import {handleDraftModeActionMissing} from '@sanity/next-loader/server-actions'\nimport {perspectiveCookieName} from '@sanity/preview-url-secret/constants'\n// import {validateSecret} from '@sanity/preview-url-secret/validate-secret'\nimport {cookies, draftMode} from 'next/headers.js'\nimport {sanitizePerspective} from './utils'\n\n/**\n * @public\n */\nexport type DefinedSanityFetchType = <const QueryString extends string>(options: {\n  query: QueryString\n  params?: QueryParams | Promise<QueryParams>\n  perspective?: Exclude<ClientPerspective, 'raw'>\n  stega?: boolean\n  tag?: string\n}) => Promise<{\n  data: ClientReturn<QueryString>\n  sourceMap: ContentSourceMap | null\n  tags: string[]\n}>\n\n/**\n * @public\n */\nexport type DefinedSanityLiveStreamType = <const QueryString extends string>(props: {\n  query: QueryString\n  params?: QueryParams | Promise<QueryParams>\n  perspective?: Exclude<ClientPerspective, 'raw'>\n  stega?: boolean\n  tag?: string\n  children: (result: {\n    data: ClientReturn<QueryString>\n    sourceMap: ContentSourceMap | null\n    tags: string[]\n  }) => Promise<Awaited<React.ReactNode>>\n  // @TODO follow up on this after React 19: https://github.com/vercel/next.js/discussions/67365#discussioncomment-9935377\n  // }) => Promise<Awaited<React.ReactNode>>\n}) => React.ReactNode\n\n/**\n * @public\n */\nexport interface DefinedSanityLiveProps {\n  projectId?: string\n  /**\n   * Automatic refresh of RSC when the component <SanityLive /> is mounted.\n   * Note that this is different from revalidation, which is based on tags and causes `sanityFetch` calls to be re-fetched.\n   * @defaultValue `true`\n   */\n  refreshOnMount?: boolean\n  /**\n   * Automatically refresh when window gets focused\n   * Note that this is different from revalidation, which is based on tags and causes `sanityFetch` calls to be re-fetched.\n   * @defaultValue `false` if draftMode().isEnabled, otherwise `true` if not inside an iframe\n   */\n  refreshOnFocus?: boolean\n  /**\n   * Automatically refresh when the browser regains a network connection (via navigator.onLine)\n   * Note that this is different from revalidation, which is based on tags and causes `sanityFetch` calls to be re-fetched.\n   * @defaultValue `true`\n   */\n  refreshOnReconnect?: boolean\n\n  /**\n   * Optional request tag for the listener. Use to identify the request in logs.\n   *\n   * @defaultValue `next-loader.live`\n   */\n  tag?: string\n  /**\n   * Handle errors from the Live Events subscription.\n   * By default it's reported using `console.error`, you can override this prop to handle it in your own way.\n   */\n  onError?: (error: unknown) => void\n}\n\n/**\n * @public\n */\nexport interface DefineSanityLiveOptions {\n  /**\n   * Required for `sanityFetch` and `SanityLive` to work\n   */\n  client: SanityClient\n  /**\n   * Optional. If provided then the token needs to have permissions to query documents with `drafts.` prefixes in order for `perspective: 'previewDrafts'` to work.\n   * This token is not shared with the browser.\n   */\n  serverToken?: string\n  /**\n   * Optional. This token is shared with the browser, and should only have access to query published documents.\n   * It is used to setup a `Live Draft Content` EventSource connection, and enables live previewing drafts stand-alone, outside of Presentation Tool.\n   */\n  browserToken?: string\n  /**\n   * Fetch options used by `sanityFetch`\n   */\n  fetchOptions?: {\n    /**\n     * Optional, enables time based revalidation in addition to the EventSource connection.\n     * @defaultValue `false`\n     */\n    revalidate?: number | false\n  }\n  /**\n   * Optional. Include stega encoding when draft mode is enabled.\n   *  @defaultValue `true`\n   */\n  stega?: boolean\n}\n\n// export type VerifyPreviewSecretType = (\n//   secret: string,\n// ) => Promise<{isValid: boolean; studioUrl: string | null}>\n\n/**\n * @public\n */\nexport function defineLive(config: DefineSanityLiveOptions): {\n  /**\n   * Use this function to fetch data from Sanity in your React Server Components.\n   * @public\n   */\n  sanityFetch: DefinedSanityFetchType\n  /**\n   * Render this in your root layout.tsx to make your page revalidate on new content live, automatically.\n   * @public\n   */\n  SanityLive: React.ComponentType<DefinedSanityLiveProps>\n  /**\n   * @alpha experimental, it may change or even be removed at any time\n   */\n  SanityLiveStream: DefinedSanityLiveStreamType\n  // verifyPreviewSecret: VerifyPreviewSecretType\n} {\n  const {\n    client: _client,\n    serverToken,\n    browserToken,\n    fetchOptions,\n    stega: stegaEnabled = true,\n  } = config\n\n  if (!_client) {\n    throw new Error('`client` is required for `defineLive` to function')\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !serverToken) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'No `serverToken` provided to `defineLive`. This means that only published content will be fetched and respond to live events',\n    )\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !browserToken) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'No `browserToken` provided to `defineLive`. This means that live previewing drafts will only work when using the Presentation Tool in your Sanity Studio. To support live previewing drafts stand-alone, provide a `browserToken`. It is shared with the browser so it should only have Viewer rights or lower',\n    )\n  }\n\n  const client = _client.withConfig({allowReconfigure: false, useCdn: false})\n  const {token: originalToken} = client.config()\n  const studioUrlDefined = typeof client.config().stega.studioUrl !== 'undefined'\n\n  const sanityFetch: DefinedSanityFetchType = async function sanityFetch<\n    const QueryString extends string,\n  >({\n    query,\n    params = {},\n    stega: _stega,\n    perspective: _perspective,\n    tag = 'next-loader.fetch',\n  }: {\n    query: QueryString\n    params?: QueryParams | Promise<QueryParams>\n    stega?: boolean\n    perspective?: Exclude<ClientPerspective, 'raw'>\n    tag?: string\n  }) {\n    const stega = _stega ?? (stegaEnabled && studioUrlDefined && (await draftMode()).isEnabled)\n    const perspective =\n      _perspective ??\n      ((await draftMode()).isEnabled\n        ? (await cookies()).has(perspectiveCookieName)\n          ? sanitizePerspective(\n              (await cookies()).get(perspectiveCookieName)?.value,\n              'previewDrafts',\n            )\n          : 'previewDrafts'\n        : 'published')\n    const useCdn = perspective === 'published'\n    const revalidate =\n      (fetchOptions?.revalidate ?? process.env.NODE_ENV === 'production') ? false : undefined\n\n    // fetch the tags first, with revalidate to 1s to ensure we get the latest tags, eventually\n    const {syncTags} = await client.fetch(query, await params, {\n      filterResponse: false,\n      perspective: perspective as ClientPerspective,\n      stega: false,\n      returnQuery: false,\n      next: {revalidate, tags: ['sanity:fetch-sync-tags']},\n      useCdn,\n      cacheMode: useCdn ? 'noStale' : undefined,\n      tag: [tag, 'fetch-sync-tags'].filter(Boolean).join('.'),\n    })\n\n    const tags = ['sanity', ...(syncTags?.map((tag) => `sanity:${tag}`) || [])]\n\n    const {result, resultSourceMap} = await client.fetch(query, await params, {\n      filterResponse: false,\n      perspective: perspective as ClientPerspective,\n      stega,\n      token: perspective !== 'published' && serverToken ? serverToken : originalToken,\n      next: {revalidate, tags},\n      useCdn,\n      cacheMode: useCdn ? 'noStale' : undefined,\n      tag,\n    })\n    return {data: result, sourceMap: resultSourceMap || null, tags}\n  }\n\n  const SanityLive: React.ComponentType<DefinedSanityLiveProps> = async function SanityLive(props) {\n    const {\n      // handleDraftModeAction = handleDraftModeActionMissing\n      refreshOnMount,\n      refreshOnFocus,\n      refreshOnReconnect,\n      tag = 'next-loader.live',\n      onError,\n      projectId: _projectId,\n    } = props\n    const {\n      projectId,\n      dataset,\n      apiHost,\n      apiVersion: _apiVersion,\n      useProjectHostname,\n      requestTagPrefix,\n    } = client.config()\n    const {isEnabled: isDraftModeEnabled} = await draftMode()\n\n    let apiVersion = _apiVersion\n    // @TODO temporarily handle the Live Draft Content API only being available on vX\n    if (typeof browserToken === 'string' && isDraftModeEnabled) {\n      apiVersion = 'vX'\n    }\n\n    return (\n      <SanityLiveClientComponent\n        projectId={_projectId ?? projectId}\n        dataset={dataset}\n        apiHost={apiHost}\n        apiVersion={apiVersion}\n        useProjectHostname={useProjectHostname}\n        requestTagPrefix={requestTagPrefix}\n        tag={tag}\n        token={typeof browserToken === 'string' && isDraftModeEnabled ? browserToken : undefined}\n        draftModeEnabled={isDraftModeEnabled}\n        // handleDraftModeAction={handleDraftModeAction}\n        draftModePerspective={\n          isDraftModeEnabled\n            ? (await cookies()).has(perspectiveCookieName)\n              ? sanitizePerspective(\n                  (await cookies()).get(perspectiveCookieName)?.value,\n                  'previewDrafts',\n                )\n              : 'previewDrafts'\n            : 'published'\n        }\n        refreshOnMount={refreshOnMount}\n        refreshOnFocus={refreshOnFocus}\n        refreshOnReconnect={refreshOnReconnect}\n        onError={onError}\n      />\n    )\n  }\n\n  // @ts-expect-error - follow up on this after React 19: https://github.com/vercel/next.js/discussions/67365#discussioncomment-9935377\n  const SanityLiveStream: DefinedSanityLiveStreamType = async function SanityLiveStream(props) {\n    const {\n      query,\n      params,\n      perspective: _perspective,\n      stega: _stega,\n      children,\n      tag = 'next-loader.live-stream.fetch',\n    } = props\n    const {data, sourceMap, tags} = await sanityFetch({\n      query,\n      params,\n      perspective: _perspective,\n      stega: _stega,\n      tag,\n    })\n    const {isEnabled: isDraftModeEnabled} = await draftMode()\n\n    if (isDraftModeEnabled) {\n      const stega = _stega ?? (stegaEnabled && studioUrlDefined && (await draftMode()).isEnabled)\n      const perspective =\n        (_perspective ?? (await cookies()).has(perspectiveCookieName))\n          ? sanitizePerspective(\n              (await cookies()).get(perspectiveCookieName)?.value,\n              'previewDrafts',\n            )\n          : 'previewDrafts'\n      const {projectId, dataset} = client.config()\n      return (\n        <SanityLiveStreamClientComponent\n          projectId={projectId}\n          dataset={dataset}\n          query={query}\n          params={await params}\n          perspective={perspective}\n          stega={stega}\n          initial={children({data, sourceMap, tags})}\n          // eslint-disable-next-line react/no-children-prop, @typescript-eslint/no-explicit-any\n          children={children as unknown as any}\n        />\n      )\n    }\n\n    return children({data, sourceMap, tags})\n  }\n\n  // const verifyPreviewSecret: VerifyPreviewSecretType = async (secret) => {\n  //   if (!serverToken) {\n  //     throw new Error(\n  //       '`serverToken` is required to verify a preview secrets and initiate draft mode',\n  //     )\n  //   }\n\n  //   if (typeof secret !== 'string') {\n  //     throw new TypeError('`secret` must be a string')\n  //   }\n  //   if (!secret.trim()) {\n  //     throw new Error('`secret` must not be an empty string')\n  //   }\n\n  //   const client = _client.withConfig({\n  //     // Use the token that is setup to query draft documents, it should also have permission to query for secrets\n  //     token: serverToken,\n  //     // Userland might be using an API version that's too old to use perspectives\n  //     apiVersion,\n  //     // We can't use the CDN, the secret is typically validated right after it's created\n  //     useCdn: false,\n  //     // Don't waste time returning a source map, we don't need it\n  //     resultSourceMap: false,\n  //     // Stega is not needed\n  //     stega: false,\n  //   })\n  //   const {isValid, studioUrl} = await validateSecret(client, secret, false)\n  //   return {isValid, studioUrl}\n  // }\n\n  return {\n    sanityFetch,\n    SanityLive,\n    SanityLiveStream,\n    // verifyPreviewSecret\n  }\n}\n"],"names":["tag"],"mappings":"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"}